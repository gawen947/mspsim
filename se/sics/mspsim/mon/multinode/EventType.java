/**
 * Copyright (c) 2016, David Hauweele <david@hauweele.net>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * This file is part of MSPSim.
 *
 * $Id: $
 *
 * -----------------------------------------------------------------
 *
 * List of event types in a multinode monitor file along with their serialization code. 
 */

/*
 * A monitor trace is basically a list of events within a simulation instance.
 * 
 * An event can apply to the simulation only, to a node within the simulation,
 * or even to something that happen behind the simulation.
 * 
 * Therefore events are organized as a hierarchy of event types (starting at 
 * the Root event type). A single event is represented by a path within this
 * hierarchy, and each element specifies the scope of the event. For example
 * the SIMULATION element specifies the simulation timestamp, while the NODE
 * element specifies the node ID and the node CPU timestamp.
 * 
 * ROOT
 *  \___ SIMULATION
 *          \_________ NODE
 *                       \____ MON_STATE
 *                       \____ MON_DATA
 *                       \____ NODE_CREATE
 *                       \____ NODE_DESTROY
 *                       \____ NODE_POSITION
 * 
 * We want this format to be forward compatible. In other words we want to be able
 * to parse a trace with new unknown event types. Therefore we need:
 * 
 *  1) A way to distinguish multiple events. This is the aim of the ROOT element.
 *  
 *  2) A way for the parser to skip unknown event. To this end, all elements are 
 *     serialized with their length in addition to their type.
 * 
 * An element is formatted as follows (except for the ROOT element):
 * 
 *  [2 bytes: TYPE & LEN][1/4 byte: LEN][var: DATA]
 *  
 * Since most elements are very small, the len field can be 1 or 4 bytes long.
 * This is controlled by the LEN bit (LSB) of the TYPE & LEN field. If this
 * bit is 0, then the len is 1 byte long, otherwise the len is 4 bytes long.
 */

package se.sics.mspsim.mon.multinode;

public enum EventType {
  ROOT(0),           /* Any event that happens. */
  SIMULATION(1),    /* Events that happen within the simulation. */
  NODE(2),           /* Events that happen within for a specific node. */
  MON_OFFSET(3),    /* Record the offset for the specific monitor used within a node. */
  MON_STATE(4),     /* State events generated by the monitor inside the firmware. */
  MON_DATA(5),      /* Data events generated by the monitor inside the firmware. */
  NODE_CREATE(6),   /* When a node has been added to the simulation. */
  NODE_DESTROY(7),  /* When a node has been removed from the simulation. */
  NODE_POSITION(8); /* When a node moves. */
  
  public final short code;
  
  EventType(int code) {
    this.code = (short)code;
  }
}
